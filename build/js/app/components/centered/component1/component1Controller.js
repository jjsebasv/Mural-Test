'use strict';

angular.module('mural-test-app').controller('Component1Controller', ['$scope', '$window', function ($scope, $window) {
  var _this = this;

  this.test = 'Hello World!';
  this.postits = [];
  this.selectedElements = [];
  this.clipboard = [];

  this.ctrlDown = false;
  this.shiftDown = false;
  this.editing = false;

  var ctrlKey = 17;
  var vKey = 86;
  var cKey = 67;
  var shiftKey = 16;

  // Check when a keyboard key is no longer pressed
  angular.element($window).bind('keyup', function ($event) {
    if ($event.keyCode === ctrlKey) {
      _this.ctrlDown = false;
    }
    if ($event.keyCode === shiftKey) {
      _this.shiftDown = false;
    }
    $scope.$apply();
  });

  // Check when a keyboard key is pressed
  angular.element($window).bind('keydown', function ($event) {
    // Ctrl is being pressed
    if ($event.keyCode === ctrlKey) {
      _this.ctrlDown = true;
    }
    // Shift is being pressed
    if ($event.keyCode === shiftKey) {
      _this.shiftDown = true;
    }
    // Ctrl + c is being pressed while not editing a post-it
    if (!_this.editing && _this.ctrlDown && $event.keyCode === cKey) {
      _this.clipboard = [];
      angular.forEach(_this.selectedElements, function (obj) {
        _this.clipboard.push(angular.fromJson(obj[0].attributes.elem.value));
      });
    }
    // Ctrl + v is being pressed while not editing a post-it
    if (!_this.editing && _this.ctrlDown && $event.keyCode === vKey) {
      angular.forEach(_this.clipboard, function (obj) {
        _this.postits.push(obj);
      });
    }
    $scope.$apply();
  });

  // Add new post-it to the mural
  this.addNew = function ($event) {
    $event.preventDefault();
    _this.postits.push({
      title: 'REMINDER',
      text: 'Default text',
      x: $event.layerX - 150,
      y: $event.layerY - 25,
      editable: false
    });
  };

  // Clear the post-it selection
  this.clearSelect = function ($event) {
    $event.preventDefault();
    angular.forEach(_this.selectedElements, function (selected) {
      selected.css({
        border: 'none'
      });
    });
    _this.editing = false;
    _this.selectedElements = [];
  };
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9jb21wb25lbnRzL2NlbnRlcmVkL2NvbXBvbmVudDEvY29tcG9uZW50MUNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkd2luZG93IiwidGVzdCIsInBvc3RpdHMiLCJzZWxlY3RlZEVsZW1lbnRzIiwiY2xpcGJvYXJkIiwiY3RybERvd24iLCJzaGlmdERvd24iLCJlZGl0aW5nIiwiY3RybEtleSIsInZLZXkiLCJjS2V5Iiwic2hpZnRLZXkiLCJlbGVtZW50IiwiYmluZCIsIiRldmVudCIsImtleUNvZGUiLCIkYXBwbHkiLCJmb3JFYWNoIiwib2JqIiwicHVzaCIsImZyb21Kc29uIiwiYXR0cmlidXRlcyIsImVsZW0iLCJ2YWx1ZSIsImFkZE5ldyIsInByZXZlbnREZWZhdWx0IiwidGl0bGUiLCJ0ZXh0IiwieCIsImxheWVyWCIsInkiLCJsYXllclkiLCJlZGl0YWJsZSIsImNsZWFyU2VsZWN0Iiwic2VsZWN0ZWQiLCJjc3MiLCJib3JkZXIiXSwibWFwcGluZ3MiOiI7O0FBQUFBLFFBQVFDLE1BQVIsQ0FBZSxnQkFBZixFQUFpQ0MsVUFBakMsQ0FBNEMsc0JBQTVDLEVBQW9FLENBQ2xFLFFBRGtFLEVBQ3hELFNBRHdELEVBRWxFLFVBQVVDLE1BQVYsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQUE7O0FBQ3pCLE9BQUtDLElBQUwsR0FBWSxjQUFaO0FBQ0EsT0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDQSxPQUFLQyxnQkFBTCxHQUF3QixFQUF4QjtBQUNBLE9BQUtDLFNBQUwsR0FBaUIsRUFBakI7O0FBRUEsT0FBS0MsUUFBTCxHQUFnQixLQUFoQjtBQUNBLE9BQUtDLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxPQUFLQyxPQUFMLEdBQWUsS0FBZjs7QUFFQSxNQUFNQyxVQUFVLEVBQWhCO0FBQ0EsTUFBTUMsT0FBTyxFQUFiO0FBQ0EsTUFBTUMsT0FBTyxFQUFiO0FBQ0EsTUFBTUMsV0FBVyxFQUFqQjs7QUFFQTtBQUNBZixVQUFRZ0IsT0FBUixDQUFnQlosT0FBaEIsRUFBeUJhLElBQXpCLENBQThCLE9BQTlCLEVBQXVDLFVBQUNDLE1BQUQsRUFBWTtBQUNqRCxRQUFJQSxPQUFPQyxPQUFQLEtBQW1CUCxPQUF2QixFQUFnQztBQUM5QixZQUFLSCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0Q7QUFDRCxRQUFJUyxPQUFPQyxPQUFQLEtBQW1CSixRQUF2QixFQUFpQztBQUMvQixZQUFLTCxTQUFMLEdBQWlCLEtBQWpCO0FBQ0Q7QUFDRFAsV0FBT2lCLE1BQVA7QUFDRCxHQVJEOztBQVVBO0FBQ0FwQixVQUFRZ0IsT0FBUixDQUFnQlosT0FBaEIsRUFBeUJhLElBQXpCLENBQThCLFNBQTlCLEVBQXlDLFVBQUNDLE1BQUQsRUFBWTtBQUNuRDtBQUNBLFFBQUlBLE9BQU9DLE9BQVAsS0FBbUJQLE9BQXZCLEVBQWdDO0FBQzlCLFlBQUtILFFBQUwsR0FBZ0IsSUFBaEI7QUFDRDtBQUNEO0FBQ0EsUUFBSVMsT0FBT0MsT0FBUCxLQUFtQkosUUFBdkIsRUFBaUM7QUFDL0IsWUFBS0wsU0FBTCxHQUFpQixJQUFqQjtBQUNEO0FBQ0Q7QUFDQSxRQUFJLENBQUMsTUFBS0MsT0FBTixJQUFpQixNQUFLRixRQUF0QixJQUFrQ1MsT0FBT0MsT0FBUCxLQUFtQkwsSUFBekQsRUFBK0Q7QUFDN0QsWUFBS04sU0FBTCxHQUFpQixFQUFqQjtBQUNBUixjQUFRcUIsT0FBUixDQUFnQixNQUFLZCxnQkFBckIsRUFBdUMsVUFBQ2UsR0FBRCxFQUFTO0FBQzlDLGNBQUtkLFNBQUwsQ0FBZWUsSUFBZixDQUFvQnZCLFFBQVF3QixRQUFSLENBQWlCRixJQUFJLENBQUosRUFBT0csVUFBUCxDQUFrQkMsSUFBbEIsQ0FBdUJDLEtBQXhDLENBQXBCO0FBQ0QsT0FGRDtBQUdEO0FBQ0Q7QUFDQSxRQUFJLENBQUMsTUFBS2hCLE9BQU4sSUFBaUIsTUFBS0YsUUFBdEIsSUFBa0NTLE9BQU9DLE9BQVAsS0FBbUJOLElBQXpELEVBQStEO0FBQzdEYixjQUFRcUIsT0FBUixDQUFnQixNQUFLYixTQUFyQixFQUFnQyxVQUFDYyxHQUFELEVBQVM7QUFDdkMsY0FBS2hCLE9BQUwsQ0FBYWlCLElBQWIsQ0FBa0JELEdBQWxCO0FBQ0QsT0FGRDtBQUdEO0FBQ0RuQixXQUFPaUIsTUFBUDtBQUNELEdBdkJEOztBQXlCQTtBQUNBLE9BQUtRLE1BQUwsR0FBYyxVQUFDVixNQUFELEVBQVk7QUFDeEJBLFdBQU9XLGNBQVA7QUFDQSxVQUFLdkIsT0FBTCxDQUFhaUIsSUFBYixDQUFrQjtBQUNoQk8sYUFBTyxVQURTO0FBRWhCQyxZQUFNLGNBRlU7QUFHaEJDLFNBQUdkLE9BQU9lLE1BQVAsR0FBZ0IsR0FISDtBQUloQkMsU0FBR2hCLE9BQU9pQixNQUFQLEdBQWdCLEVBSkg7QUFLaEJDLGdCQUFVO0FBTE0sS0FBbEI7QUFPRCxHQVREOztBQVdBO0FBQ0EsT0FBS0MsV0FBTCxHQUFtQixVQUFDbkIsTUFBRCxFQUFZO0FBQzdCQSxXQUFPVyxjQUFQO0FBQ0E3QixZQUFRcUIsT0FBUixDQUFnQixNQUFLZCxnQkFBckIsRUFBdUMsVUFBQytCLFFBQUQsRUFBYztBQUNuREEsZUFBU0MsR0FBVCxDQUFhO0FBQ1hDLGdCQUFRO0FBREcsT0FBYjtBQUdELEtBSkQ7QUFLQSxVQUFLN0IsT0FBTCxHQUFlLEtBQWY7QUFDQSxVQUFLSixnQkFBTCxHQUF3QixFQUF4QjtBQUNELEdBVEQ7QUFVRCxDQTdFaUUsQ0FBcEUiLCJmaWxlIjoiYXBwL2NvbXBvbmVudHMvY2VudGVyZWQvY29tcG9uZW50MS9jb21wb25lbnQxQ29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdtdXJhbC10ZXN0LWFwcCcpLmNvbnRyb2xsZXIoJ0NvbXBvbmVudDFDb250cm9sbGVyJywgW1xuICAnJHNjb3BlJywgJyR3aW5kb3cnLFxuICBmdW5jdGlvbiAoJHNjb3BlLCAkd2luZG93KSB7XG4gICAgdGhpcy50ZXN0ID0gJ0hlbGxvIFdvcmxkISc7XG4gICAgdGhpcy5wb3N0aXRzID0gW107XG4gICAgdGhpcy5zZWxlY3RlZEVsZW1lbnRzID0gW107XG4gICAgdGhpcy5jbGlwYm9hcmQgPSBbXTtcblxuICAgIHRoaXMuY3RybERvd24gPSBmYWxzZTtcbiAgICB0aGlzLnNoaWZ0RG93biA9IGZhbHNlO1xuICAgIHRoaXMuZWRpdGluZyA9IGZhbHNlO1xuXG4gICAgY29uc3QgY3RybEtleSA9IDE3O1xuICAgIGNvbnN0IHZLZXkgPSA4NjtcbiAgICBjb25zdCBjS2V5ID0gNjc7XG4gICAgY29uc3Qgc2hpZnRLZXkgPSAxNjtcblxuICAgIC8vIENoZWNrIHdoZW4gYSBrZXlib2FyZCBrZXkgaXMgbm8gbG9uZ2VyIHByZXNzZWRcbiAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykuYmluZCgna2V5dXAnLCAoJGV2ZW50KSA9PiB7XG4gICAgICBpZiAoJGV2ZW50LmtleUNvZGUgPT09IGN0cmxLZXkpIHtcbiAgICAgICAgdGhpcy5jdHJsRG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCRldmVudC5rZXlDb2RlID09PSBzaGlmdEtleSkge1xuICAgICAgICB0aGlzLnNoaWZ0RG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgIH0pO1xuXG4gICAgLy8gQ2hlY2sgd2hlbiBhIGtleWJvYXJkIGtleSBpcyBwcmVzc2VkXG4gICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLmJpbmQoJ2tleWRvd24nLCAoJGV2ZW50KSA9PiB7XG4gICAgICAvLyBDdHJsIGlzIGJlaW5nIHByZXNzZWRcbiAgICAgIGlmICgkZXZlbnQua2V5Q29kZSA9PT0gY3RybEtleSkge1xuICAgICAgICB0aGlzLmN0cmxEb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFNoaWZ0IGlzIGJlaW5nIHByZXNzZWRcbiAgICAgIGlmICgkZXZlbnQua2V5Q29kZSA9PT0gc2hpZnRLZXkpIHtcbiAgICAgICAgdGhpcy5zaGlmdERvd24gPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gQ3RybCArIGMgaXMgYmVpbmcgcHJlc3NlZCB3aGlsZSBub3QgZWRpdGluZyBhIHBvc3QtaXRcbiAgICAgIGlmICghdGhpcy5lZGl0aW5nICYmIHRoaXMuY3RybERvd24gJiYgJGV2ZW50LmtleUNvZGUgPT09IGNLZXkpIHtcbiAgICAgICAgdGhpcy5jbGlwYm9hcmQgPSBbXTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuc2VsZWN0ZWRFbGVtZW50cywgKG9iaikgPT4ge1xuICAgICAgICAgIHRoaXMuY2xpcGJvYXJkLnB1c2goYW5ndWxhci5mcm9tSnNvbihvYmpbMF0uYXR0cmlidXRlcy5lbGVtLnZhbHVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gQ3RybCArIHYgaXMgYmVpbmcgcHJlc3NlZCB3aGlsZSBub3QgZWRpdGluZyBhIHBvc3QtaXRcbiAgICAgIGlmICghdGhpcy5lZGl0aW5nICYmIHRoaXMuY3RybERvd24gJiYgJGV2ZW50LmtleUNvZGUgPT09IHZLZXkpIHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRoaXMuY2xpcGJvYXJkLCAob2JqKSA9PiB7XG4gICAgICAgICAgdGhpcy5wb3N0aXRzLnB1c2gob2JqKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgbmV3IHBvc3QtaXQgdG8gdGhlIG11cmFsXG4gICAgdGhpcy5hZGROZXcgPSAoJGV2ZW50KSA9PiB7XG4gICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMucG9zdGl0cy5wdXNoKHtcbiAgICAgICAgdGl0bGU6ICdSRU1JTkRFUicsXG4gICAgICAgIHRleHQ6ICdEZWZhdWx0IHRleHQnLFxuICAgICAgICB4OiAkZXZlbnQubGF5ZXJYIC0gMTUwLFxuICAgICAgICB5OiAkZXZlbnQubGF5ZXJZIC0gMjUsXG4gICAgICAgIGVkaXRhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIENsZWFyIHRoZSBwb3N0LWl0IHNlbGVjdGlvblxuICAgIHRoaXMuY2xlYXJTZWxlY3QgPSAoJGV2ZW50KSA9PiB7XG4gICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLnNlbGVjdGVkRWxlbWVudHMsIChzZWxlY3RlZCkgPT4ge1xuICAgICAgICBzZWxlY3RlZC5jc3Moe1xuICAgICAgICAgIGJvcmRlcjogJ25vbmUnXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVkaXRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2VsZWN0ZWRFbGVtZW50cyA9IFtdO1xuICAgIH07XG4gIH1cbl0pO1xuIl19
